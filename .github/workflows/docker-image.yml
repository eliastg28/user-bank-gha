name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Generar versi√≥n basada en los commits
    - name: Generar versi√≥n sem√°ntica
      uses: PaulHatch/semantic-version@v4.0.3
      with:
        major_pattern: "major:"
        minor_pattern: "feat:"
        format: "${major}.${minor}.${patch}-prerelease${increment}"
      id: version

    # Verificar la versi√≥n generada
    - name: Verificar versi√≥n generada
      run: echo "üîπ Versi√≥n generada: ${{ steps.version.outputs.version }}"

    # Validar que la versi√≥n no est√© vac√≠a
    - name: Validar versi√≥n generada
      run: |
        if [ -z "${{ steps.version.outputs.version }}" ]; then
          echo "‚ùå ERROR: La versi√≥n generada est√° vac√≠a. Verifica la acci√≥n semantic-version."
          exit 1
        fi

    # Configurar JDK y Maven
    - name: Configurar JDK 11
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Construir JAR con Maven
      run: mvn clean package -DskipTests

    # Iniciar sesi√≥n en Docker Hub
    - name: Docker Login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin

    # Construcci√≥n y push de la imagen con versi√≥n
    - name: Construir y subir imagen Docker
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        NEW_VERSION: ${{ steps.version.outputs.version }}
        MYSQL_URL: ${{ secrets.MYSQL_URL }}
        MYSQL_USER: ${{ secrets.MYSQL_USER }}
        MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        PORT: ${{ secrets.PORT }}
      run: |
        echo "üìå Iniciando construcci√≥n de imagen Docker con versi√≥n: $NEW_VERSION"
        
        docker build --build-arg MYSQL_URL=$MYSQL_URL \
                     --build-arg MYSQL_USER=$MYSQL_USER \
                     --build-arg MYSQL_PASSWORD=$MYSQL_PASSWORD \
                     --build-arg JWT_SECRET=$JWT_SECRET \
                     --build-arg PORT=$PORT \
                     -t $DOCKER_USER/user-bank-gha:$NEW_VERSION .
        
        docker tag $DOCKER_USER/user-bank-gha:$NEW_VERSION $DOCKER_USER/user-bank-gha:latest
        
        echo "üöÄ Subiendo imagen a Docker Hub..."
        docker push $DOCKER_USER/user-bank-gha:$NEW_VERSION
        docker push $DOCKER_USER/user-bank-gha:latest
